{
	"info": {
		"_postman_id": "0b24b580-5617-465c-a821-59cfb41614a9",
		"name": "Pynt",
		"description": "<img src=\"https://content.pstmn.io/d9243399-d71c-4a28-abd7-7b51908a2c19/UHludC1IZWFkZXItTG9nby5wbmc=\">\n\n# **Description:**\n\nPynt is an API security solution which generates automated security tests based on your existing functional test collection. Simply input your functional test collection name into the Pynt collection, and run the API security test collection in your workspace.\n\nPynt’s dynamic security testing covers all the OWASP API Top 10 ([https://owasp.org/www-project-api-security](https://owasp.org/www-project-api-security/)), retrieving results about your overall API security in just a few minutes.\n\n<img src=\"https://content.pstmn.io/02c332a2-32cd-44c5-b6c6-628998f0fe53/TGFwdG9wLmdpZg==\">\n\n# **Prerequisites:**\n\n1. Ensure you are working with **the Postman app** (install from [https://www.postman.com/downloads](https://www.postman.com/downloads)).  \n    Please note that the Pynt solution is based on docker and requires access to the local host, so it doesn't support the Postman web.\n2. Ensure the **Docker engine** is available and running on your machine (install it from: [https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/)).\n3. Check that your **functional test collection** is available in your workspace.\n4. Set any required **environment variables** for the functional test collection.\n5. Ensure the **target is up**.\n    \n\n# **Important Notes:**\n\n\\* Verify you are ready by running your functional test collection vs. your target before executing Pynt’s security tests.  \n\\* Pynt utilizes your functional tests to inform the security tests it runs. The more extensive the functional tests are, the more the security tests will cover. More APIs, more users, more requests, and full use of the parameters will trigger broader and richer dynamic security tests.\n\n# **Getting Started:**\n\n1. Open your workspace from the Postman desktop app.\n2. Download and run the Pynt docker by executing the following command (port number can be changed if already taken):\n    1. **Docker Desktop for Windows, Mac, or Linux** - run from cmd/terminal: `docker run -p 5001:5001 --pull always ghcr.io/pynt-io/pynt:postman-latest`(the left port can be changed if already taken on your machine)\n    2. **Docker engine for Linux** - run from terminal: `docker run --pull always --network=host ghcr.io/pynt-io/pynt:postman-latest`\n\nThis step should be repeated if you restarted your PC.\n\n<img src=\"https://content.pstmn.io/86b6541a-a763-4e9c-b65a-50d7ce2db185/aW1hZ2UucG5n\" alt=\"Run%20Pynt%20docker\" width=\"1919\" height=\"383\">\n\n# **How to Run:**\n\nMake sure Pynt's docker is still up.\n\n1. Click on the '**Variables**' tab of the '**Pynt**' collection and fill in the values of the required parameters, in the 'CURRENT VALUE' column:\n    1. `API-KEY` - your postman API key - If you previously saved and have your API key, enter it here under the 'Current Value' tab. If not, enter [https://postman.co/settings/me/api-keys](https://postman.co/settings/me/api-keys) to generate or regenerate your API key as for security reasons it can only be copied at the time of creation. You won't need to modify this parameter again until the API-key expires.\n    2. `PYNT-PORT` - the left port number used in the docker run command (default-5001).\n    3. `YOUR-COLLECTION`\\- your functional test collection name, or the collection UID (both are acceptable, UID is preferred if you have two collections with the same name associated with the API-KEY). Pynt will refer to this collection to generate the automated security tests.  \n        If you wish to have a reference application to test, Pynt provides a vulnerable app example called '**goat**' that you can fork from Pynt's public workspace: [https://www.postman.com/pynt-io/workspace/pynt](https://www.postman.com/pynt-io/workspace/pynt) and use it here.\n    4. `scanId` - output variable, used internally. Ignore.\n    5. Click 'Save'.\n2. Run the '**Pynt**' collection to get the security results:\n    1. The security results for OWASP-10 categories will appear on the main console screen.\n    2. Click on 'View Summary' to view the results summary.\n    3. In order to see the full report, uncollapse the '**Pynt**' collection, go to the last request '**Show Report**' and click on 'Send'. choose the 'Visualize' tab on the lower section to see the full report.\n\n\\* If you modified your test collection in any way, simply re-run Pynt collection.  \n\\* Should you need to test another collection, simply update the `YOUR-COLLECTION`variable and re-run the 'Pynt' collection.\n\n**See also screenshot examples:**\n\n<img src=\"https://user-images.githubusercontent.com/107360829/184632643-ba29d4d6-b4f6-4d8b-a025-bf42b5662639.png\" alt=\"Image%201%20-%20Generate/copy%20API%20Key%20if%20forgotten\">\n\n<img src=\"https://content.pstmn.io/547baa18-0cdc-4738-ae4b-42adbf4a4e66/SW1hZ2UxX1VwZGF0ZVB5bnRWYXJpYWJsZXMucG5n\" alt=\"Image%202%20-%20Enter%20'Pynt'%20collection%20parameters\">\n\n<img src=\"https://content.pstmn.io/fdf66bb2-0f07-4c3d-af54-6013da63462a/SW1hZ2UyX1J1blB5bnQucG5n\" alt=\"Image%203%20-%20Run%20the%20'Pynt'%20collection%20to%20generate%20full%20OWASP-10%20API-security%20tests%20for%20your%20collection\">\n\n<img src=\"https://content.pstmn.io/9fdaa0e7-6d3f-4ef5-9208-fb3e1cdb7bc2/SW1hZ2UzX1ZpZXdSZXN1bHRzLnBuZw==\" alt=\"Image%204%20-%20View%20the%20API%20security%20test%20results\">\n\n<img src=\"https://content.pstmn.io/99c68252-a398-4c0b-927b-e7991fc8cece/SW1hZ2U0X1ZpZXdTdW1tYXJ5LnBuZw==\" alt=\"Image%205%20-%20View%20results%20summary\">\n\n<img src=\"https://content.pstmn.io/df120d8d-48cf-4d69-8e4c-e8783e2b239a/SW1hZ2U2X1Zpc3VhbGl6ZVN1bW1hcnkucG5n\" alt=\"Image%206%20-%20View%20visualize%20report%20for%20security%20summary\">\n\n<img src=\"https://content.pstmn.io/a86d823d-ee6c-4dcd-9d5c-b0f117a6d740/SW1hZ2U2X1Zpc3VhbGl6ZURldGFpbGVkLnBuZw==\" alt=\"Image%207%20-%20View%20visualize%20report%20for%20detailed%20findings\">\n\n# Troubleshooting\n\nHave issues running Pynt? you have several options:\n\n1. Visit our [Troubleshooting Page](https://docs.pynt.io/documentation/troubleshooting)\n2. Join our [Community Channel](https://www.pynt.io/community)\n3. [Contact us](https://www.pynt.io/contact-us)\n    \n\n# EULA and Privacy Policy\n\nPlease read Pynt's [EULA](https://github.com/pynt-io/pynt/blob/main/EULA.md) and [privacy policy](https://github.com/pynt-io/pynt/blob/main/Privacy-Policy.md) before using Pynt.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Check that Postman is running from the desktop application",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f8f8517c-78c6-49a7-bb51-ed0f1a0c0fd2",
						"exec": [
							"pm.sendRequest({url: `http://127.0.0.1:5555`}, (error, response) => {",
							"    console.log(error)",
							"    if (error!=null && error[\"code\"] == \"ERR_ORION_LOCALHOST_REQUEST\"){",
							"        postman.setNextRequest(null);",
							"        pm.test(\"\", () => {throw new Error(\"Pynt is supported on Postman desktop application only - please run again from desktop app\")});",
							"    } else {",
							"        pm.test(\"\", () => \"\")",
							"    }",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "8c52ea99-8421-4f02-b534-f38d56500617",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://pynt.io"
			},
			"response": []
		},
		{
			"name": "Check that Pynt docker is up",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0fee0a5-4a76-4a38-b48d-7a2dc514e5e6",
						"exec": [
							"const port = pm.variables.get(\"PYNT-PORT\")",
							"pm.sendRequest({url: `http://127.0.0.1:${port}/api/scan_status`}, (error, response) => {",
							"    console.log(error)",
							"    if(!(error == null)) {",
							"        postman.setNextRequest(null);",
							"        pm.test(\"\", () => {throw new Error(\"Error - Pynt container is not running - please check our Pynt's collection documentation - 'Prerequisites' and 'How to Run' sections\")});",
							"    } else {",
							"        pm.test(\"\", () => \"\");",
							"    }",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "96db7985-7815-4596-bca8-9632ec113fde",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://pynt.io"
			},
			"response": []
		},
		{
			"name": "Start automated security tests",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b5b9310e-a758-4e0d-bd4e-50d0b89f0201",
						"exec": [
							"var env_id = pm.environment.id.split('/')[1]",
							"pm.environment.set('envName', env_id)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c123e3d6-9e2b-4085-a73d-80e212074bab",
						"exec": [
							"var resp = pm.response.json();",
							"if (resp.scanId == null){",
							"    pm.test(\"Run security scan\", () => {throw new Error('Some unexpected error occurred, please run again')});",
							"    postman.setNextRequest(null);",
							"}else {",
							"    pm.collectionVariables.set(\"scanId\", resp['scanId']);",
							"    if (pm.response.code != 200){",
							"        pm.test('Automated security tests started', () => {throw new Error(resp['error']['message']);});",
							"        postman.setNextRequest(null);",
							"    } else {",
							"        pm.test('Automated security tests started', () => \"\");",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "37473a32-4064-40b2-8637-e904013585f5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"apiKey\": \"{{API-KEY}}\",\n  \"collectionToTest\": \"{{YOUR-COLLECTION}}\",\n   \"environmentName\": \"{{envName}}\"\n}"
				},
				"url": "http://localhost:{{PYNT-PORT}}/api/run_scan"
			},
			"response": []
		},
		{
			"name": "Running automated security tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ef778cd3-093f-4af8-a1c2-ff367897b533",
						"exec": [
							"const response = pm.response;",
							"if(pm.response.code == 202){",
							"\tbody = pm.response.json();",
							"    progressPercentage = body.progressPercentages;",
							"    pm.test(progressPercentage)",
							"\tsetTimeout(() => {}, 4000);",
							"\tconsole.log('Executing dynamic security tests');",
							"\tpostman.setNextRequest(pm.info.requestId);",
							"}else{",
							"\tif(pm.response.code == 200) {",
							"        pm.test('Finished security scan')",
							"\t} else {",
							"        pm.test(\"Finished security scan\", () => {throw new Error(pm.response.json()[\"error\"][\"message\"])});",
							"\t\tpostman.setNextRequest(\"General feedback\")",
							"\t}",
							"};",
							"",
							"pm.variables.unset(\"results\");",
							"",
							"let som = pm.variables.get('results');",
							"if(som) {",
							"  som = JSON.parse(som);",
							"} else {",
							"  som = []",
							"}",
							"",
							"som.push( {",
							"  response: response.json()",
							"});",
							"",
							"pm.variables.set('results', JSON.stringify(som));",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "03a8b519-0275-4e0d-b653-42e6e874631e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:{{PYNT-PORT}}/api/scan_status?scanId={{scanId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{PYNT-PORT}}",
					"path": [
						"api",
						"scan_status"
					],
					"query": [
						{
							"key": "scanId",
							"value": "{{scanId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Broken Object Level Authorization (OWASP-10 API1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "727383d0-3a80-43bf-a7e9-a5577c8abf4a",
						"exec": [
							"results = pm.response.json();",
							"if (pm.response.code == 202) {",
							"\tpm.test(\"\", () => {throw new Error(results)});",
							"\treturn",
							"}",
							"if(Object.keys(results).length > 0 ){",
							"\tfor(var attackType in results){",
							"\t\tcases = results[attackType]",
							"\t\tfor(var i in cases) {",
							"\t\t\tpm.test(attackType, () => {throw new Error(cases[i])});",
							"\t\t}",
							"\t}",
							"}",
							"else{",
							"\tpm.test(\"\")",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "91ced9da-b16b-4d74-bc39-863d69048dce",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:5001/api/results?apitype=1&scanId={{scanId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"results"
					],
					"query": [
						{
							"key": "apitype",
							"value": "1"
						},
						{
							"key": "scanId",
							"value": "{{scanId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Broken User Authentication (OWASP-10 API2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "22204920-9fcd-4a51-beab-87a7bb61e886",
						"exec": [
							"results = pm.response.json();",
							"if (pm.response.code == 202) {",
							"\tpm.test(\"\", () => {throw new Error(results)});",
							"\treturn",
							"}",
							"if(Object.keys(results).length > 0 ){",
							"\tfor(var attackType in results){",
							"\t\tcases = results[attackType]",
							"\t\tfor(var i in cases) {",
							"\t\t\tpm.test(attackType, () => {throw new Error(cases[i])});",
							"\t\t}",
							"\t}",
							"}",
							"else{",
							"\tpm.test(\"\")",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "4585b73c-975f-4a29-bf37-94b18a4f4021",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:5001/api/results?apitype=2&scanId={{scanId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"results"
					],
					"query": [
						{
							"key": "apitype",
							"value": "2"
						},
						{
							"key": "scanId",
							"value": "{{scanId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Excessive Data Exposure (OWASP-10 API3)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "982a8032-301f-4b8d-8c79-59ce871a2bc2",
						"exec": [
							"results = pm.response.json();",
							"if (pm.response.code == 202) {",
							"\tpm.test(\"\", () => {throw new Error(results)});",
							"\treturn",
							"}",
							"if(Object.keys(results).length > 0 ){",
							"\tfor(var attackType in results){",
							"\t\tcases = results[attackType]",
							"\t\tfor(var i in cases) {",
							"\t\t\tpm.test(attackType, () => {throw new Error(cases[i])});",
							"\t\t}",
							"\t}",
							"}",
							"else{",
							"\tpm.test(\"\")",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "502ea98f-d3d1-496e-9d09-cece9e6b762f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:5001/api/results?apitype=3&scanId={{scanId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"results"
					],
					"query": [
						{
							"key": "apitype",
							"value": "3"
						},
						{
							"key": "scanId",
							"value": "{{scanId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Lack of Resources and Rate Limiting (OWASP-10 API4)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5542eb1e-7d37-4f97-9cc9-6275c9f0a8ee",
						"exec": [
							"results = pm.response.json();",
							"if (pm.response.code == 202) {",
							"\tpm.test(\"\", () => {throw new Error(results)});",
							"\treturn",
							"}",
							"if(Object.keys(results).length > 0 ){",
							"\tfor(var attackType in results){",
							"\t\tcases = results[attackType]",
							"\t\tfor(var i in cases) {",
							"\t\t\tpm.test(attackType, () => {throw new Error(cases[i])});",
							"\t\t}",
							"\t}",
							"}",
							"else{",
							"\tpm.test(\"\")",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "054dfcbd-8019-4b7e-bd03-194fd0bfa4f9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:5001/api/results?apitype=4&scanId={{scanId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"results"
					],
					"query": [
						{
							"key": "apitype",
							"value": "4"
						},
						{
							"key": "scanId",
							"value": "{{scanId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scan Results",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "65e55323-dff4-4fa7-b018-8508ea399122",
						"exec": [
							"results = pm.response.json();",
							"if (pm.response.code == 202) {",
							"\tpm.test(\"\", () => {throw new Error(results)});",
							"\treturn",
							"}",
							"if(Object.keys(results).length > 0 ){",
							"\tfor(var attackType in results){",
							"        for(var subCategory in results[attackType]){",
							"            for(var i in results[attackType][subCategory]) {",
							"                finding = results[attackType][subCategory][i]",
							"                pm.test(subCategory, () => {throw new Error(finding)});",
							"            }",
							"        }",
							"\t}",
							"}",
							"else{",
							"\tpm.test(\"\")",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "2f0caf60-27a1-42df-9ec3-5bde3d3a2b1e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:{{PYNT-PORT}}/api/findings?scanId={{scanId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{PYNT-PORT}}",
					"path": [
						"api",
						"findings"
					],
					"query": [
						{
							"key": "scanId",
							"value": "{{scanId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "General feedback",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a7202653-72d7-474e-a5f0-a9737c77ffc5",
						"exec": [
							"const response = pm.response;",
							"body = pm.response.json();",
							"feedbacks = body.generalFeedback;",
							"console.log(\"the feedbacks for the user are: \" + Object.keys(feedbacks))",
							"if (feedbacks != null) {",
							"    for (const [key, value] of Object.entries(feedbacks)) {",
							"        if (value) {",
							"            pm.test(key);",
							"        } else {",
							"            pm.test(\"\", () => {throw new Error(key)});",
							"        }",
							"    }",
							"} else {",
							"    pm.test(\"Security issues were found, please see your scan results\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "0186d06d-4d7c-4d25-ab43-24d376432701",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{PYNT-PORT}}/api/feedback?scanId={{scanId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{PYNT-PORT}}",
					"path": [
						"api",
						"feedback"
					],
					"query": [
						{
							"key": "scanId",
							"value": "{{scanId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Run is Finished",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d5e11a93-b55a-4049-b961-e22484245099",
						"exec": [
							"pm.test(\"Pynt run is finished. For full report run \\\"Show Report\\\"\");",
							"",
							"postman.setNextRequest(null);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "54311238-4438-4f27-909f-9c055e26076c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://pynt.io"
			},
			"response": []
		},
		{
			"name": "Show Report",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e71db731-1aef-43d2-9ffc-571250367faa",
						"exec": [
							"let template = pm.response.text(); ",
							"",
							"template = template.replaceAll(\"{{\", \"&#123;{\");",
							"template = template.replaceAll(\"}}\", \"&#125;}\");",
							"",
							"pm.visualizer.set(template);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "57577156-36bd-41db-a9a2-1fc45a82ecca",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "3086680d-f7a8-4b49-b06f-3c65dbcfc1cf",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{PYNT-PORT}}/api/report?scanId={{scanId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{PYNT-PORT}}",
					"path": [
						"api",
						"report"
					],
					"query": [
						{
							"key": "scanId",
							"value": "{{scanId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Broken Function Level Authorization (OWASP-10 API5)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d498048d-8749-407d-9421-53d85c953729",
						"exec": [
							"results = pm.response.json();",
							"if (pm.response.code == 202) {",
							"\tpm.test(\"\", () => {throw new Error(results)});",
							"\treturn",
							"}",
							"if(Object.keys(results).length > 0 ){",
							"\tfor(var attackType in results){",
							"\t\tcases = results[attackType]",
							"\t\tfor(var i in cases) {",
							"\t\t\tpm.test(attackType, () => {throw new Error(cases[i])});",
							"\t\t}",
							"\t}",
							"}",
							"else{",
							"\tpm.test(\"\")",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "54552804-bfbd-4b20-8d6d-210e9bb14df3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:5001/api/results?apitype=5&scanId={{scanId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"results"
					],
					"query": [
						{
							"key": "apitype",
							"value": "5"
						},
						{
							"key": "scanId",
							"value": "{{scanId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "18754f5b-7f71-42da-aaff-9621b8981f34",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4351b7ea-1527-416a-ae73-02488940587c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "eccbc5a1-52e5-4f92-ae40-244332404194",
			"key": "PYNT-PORT",
			"value": "5001"
		},
		{
			"id": "4ee3b16e-b36d-49bb-9b6a-29f448308e4d",
			"key": "API-KEY",
			"value": ""
		},
		{
			"id": "705a47f0-6676-47b0-8956-ab97879d413e",
			"key": "YOUR-COLLECTION",
			"value": ""
		},
		{
			"id": "946e1c36-ee26-476e-9c1a-aba6f7068d5e",
			"key": "scanId",
			"value": ""
		}
	]
}